import requests
import datetime
import logging
import time
from aiogram import Bot, Dispatcher, executor, types
import openai
from openexchangerate import OpenExchangeRates
 
client = OpenExchangeRates(api_key="a9f703b216bb4ae892dfe9c852de596f")
 
 


open_weather_token='8725811879ec8424cd3a8e950f0011b9'
#–ø–æ–≥–æ–¥–∞ —Ç–æ–∫–µ–Ω 


bot_token = '6282024430:AAHlACtH9Grplwr0GJZijhsPN6rWc_lI0Po'# —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞

api_key = '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' #api openai –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫(dall-e) –∏ gpt
logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

openai.api_key = api_key #api openai –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫(dall-e) –∏ gpt
messages = {} #–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ /gpt

#—Ñ—É–Ω–∫—Ü–∏—è –∂–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫:
async def generate_image(prompt):
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size="512x512", 
        response_format="url",
    )

    return response['data'][0]['url']



#/start
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    try:
        username = message.from_user.username
        messages[username] = []
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {username},—è —á–∞—Ç –±–æ—Ç ,—É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π: \n /image ...-–Ω–∞—Ä—Ç—Å–æ–≤–∞—Ç—å —Ä–∏—Å—É–Ω–æ–∫(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) \n /gpt... -—Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) \n /weather - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã  \n /money -–∫—É—Ä—Å –≤–∞–ª—é—Ç \n /poll -—Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n/dice -–ø–æ–∏–≥—Ä–∞—Ç—å\n/donate -—Å—ã–ª–æ—á–∫–∞ –Ω–∞ –¥–æ–Ω–∞—Ç \n/dict -–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫\n/fix-–∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É")
    except Exception as e:
        logging.error('Error')
        
#/donate
@dp.message_handler(commands=['donate'])
async def donate(message: types.Message):
        await message.answer(f"–ü–æ–∂–∞–ª—É—Å—Ç–∞ —Å–∫–∏–Ω—å –¥–µ–Ω—é–∂–µ–∫\n–≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –≤—ã—Ö–æ–¥ –æ–±–Ω–æ–≤–µ–Ω–∏—è\nhttps://www.sberbank.com/ru/person/dl/jc?linkname=mK3yKz8m4Ti45aCt0")

#/fix
@dp.message_handler(commands=["fix"])

async def fix(message: types.Message):
    mess=message.text
    mess=mess.replace("/fix ","")
    mess=mess.replace(" ","+")
    rek=requests.get(f"https://predictor.yandex.net/api/v1/predict.json/complete?key=pdct.1.1.20230502T171116Z.a00397515ddc2594.7b67794b02491b24599de994409e35970f46912e&q={mess}&lang=en")
    fixe=rek.json()
    fixi=fixe["text"]
    chekat=fixe["endOfWord"]
    if chekat==False:
        await message.reply(f"–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞:{fixi}")
    else:
        await message.reply(f"—Å–ª–æ–≤–æ –∏ —Ç–∞–∫ —Ü–µ–ª–æ–µ –ª–∏–±–æ –æ—à–∏–±–∫–∞\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n/fix appl")
          
#/dict
@dp.message_handler(commands=['dict'])
async def dict(message: types.Message):
    try:
        eng=message.text
        eng =eng.replace("/dict ","")
        perevod = requests.get(f"https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20230501T154127Z.ac561c32271cd3d6.c83f81519cddcb667b3dcf6d208597a1940269d2&lang=en-ru&text={eng}") 
        translate=perevod.json()
        qaz=translate["def"]
        xer=list(qaz)
        zxlol=xer[0]
        nae=list(zxlol.get("tr"))
        nal=nae[0]
        rus=nal.get("text")
        await message.reply(rus)
    except:
        await message.reply("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n/dict apple\n–ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ 1 —Å–ª–æ–≤—É")

#/dice 1...6
@dp.message_handler(commands=["dice"])
async def cmd_dice(message: types.Message):
    game=message.text
    game=game.replace("/dice ","")

    if game=="1":
        await message.answer_dice(emoji="üé≤")
    elif game=="2":
        await message.answer_dice(emoji="üéØ")
    elif game=="3":
        await message.answer_dice(emoji="üèÄ")
    elif game=="4":
        await message.answer_dice(emoji="‚öΩ")
    elif game =="5":
        await message.answer_dice(emoji="üé∞")
    elif game=="6":
        await message.answer_dice(emoji="üé≥")
    else:
        await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä:\n/dice 1\n1-–∫—É–±–∏–∫, 2-–¥–∞—Ä—Ç—Å\n3-–±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –º—è—á\n4-—Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º—è—á\n5-—Å–ª–æ—Ç –º–∞—à–∏–Ω–∞\n6-–±–æ—É–ª–∏–Ω–≥')
        

#–æ–ø—Ä–æ—Å—ã /poll
@dp.message_handler(commands=['poll'])
async def poll(message: types.Message):
    try:
        qwert=message.text
        qwert=qwert.replace('/poll ','')
        qwer=[]
        qwer=qwert.split('; ')
        await message.answer_poll(question=qwer[0],
                                  options=qwer[1:],
                                  type='regular',
                                  is_anonymous=False)
    except:
        await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n/poll –≤–æ–ø—Ä–æ—Å; –æ—Ç–≤–µ—Ç1; –æ—Ç–≤–µ—Ç2')


#–∫—É—Ä—Å –≤–∞–ª—é—Ç—ã /money
@dp.message_handler(commands=['money'])
async def kurs_valut(message: types.Message):
    try:    
        price=client.latest().dict
        x=[]
        vvod=message.text
        vvod=vvod.replace('/money ','')
        x=vvod.split(' ')
        name_value=x[0]
        kolizhestvo=x[1]
        vivod=float(price[name_value])*float(kolizhestvo)
       
        await message.reply(f'{kolizhestvo} USD= {vivod} {name_value}')
    except:
        await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n/money RUB 1')
    
#/image....
@dp.message_handler(commands=['image'])
async def send_image(message: types.Message):
    try:
        description = message.text.replace('/image', '').strip()
        if not description:
            await message.reply('–ù–∞–ø–∏—à–∏ —á—Ç–æ –Ω–∏–±—É—Ç—å –ø–æ—Å–ª–µ /image' ,parse_mode='Markdown')
            return
    except Exception as e:
        logging.error(f'Error in send_image: {e}')
    try:
        image_url = await generate_image(description)
        await bot.send_photo(chat_id=message.chat.id, photo=image_url)
    except Exception as e:
        await message.reply(
            f"ERROR")





        
#/gpt...
@dp.message_handler(commands=['gpt'])
async def echo_msg(message: types.Message):
    try:
        user_message = message.text
        userid = message.from_user.username

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        if userid not in messages:
            messages[userid] = []
        messages[userid].append({"role": "user", "content": user_message})
        messages[userid].append({"role": "user",
                                 "content": f"chat: {message.chat} –°–µ–π—á–∞—Å {time.strftime('%d/%m/%Y %H:%M:%S')} user: {message.from_user.first_name} message: {message.text}"})
        logging.info(f'{userid}: {user_message}')

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Ö–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è 
        should_respond = not message.reply_to_message or message.reply_to_message.from_user.id == bot.id

        if should_respond:
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç openai
            processing_message = await message.reply(
                '–ë–æ—Ç –¥—É–º–∞–µ—Ç,–ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
                parse_mode='Markdown')

            # ...–ø–µ—á–∞—Ç–∞–µ—Ç
            await bot.send_chat_action(chat_id=message.chat.id, action="typing")

            #–º–æ–¥–µ–ª—å gpt
            completion = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=messages[userid],
                max_tokens=2500,
                temperature=0.7,
                frequency_penalty=0,
                presence_penalty=0,
                user=userid
            )
            chatgpt_response = completion.choices[0]['message']

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ 
            messages[userid].append({"role": "assistant", "content": chatgpt_response['content']})
            logging.info(f'ChatGPT response: {chatgpt_response["content"]}')

            # –æ—Ç–ø—Ä–∞–≤–∫–∞
            await message.reply(chatgpt_response['content'])

            # —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

    except Exception as ex:
        if ex == "context_length_exceeded":
            await message.reply(
                '–£ –±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–∞–º—è—Ç—å',
                parse_mode='Markdown')
            await new_topic_cmd(message)
            await echo_msg(message)




#–ø–æ–≥–æ–¥–∞ '–≥–æ—Ä–æ–¥' 
@dp.message_handler(commands=['weather']) 
async def get_weather(message: types.Message):
    code_to_smile = { 
         "Clear": "–Ø—Å–Ω–æ \U00002600", 
         "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601", 
         "Rain": "–î–æ–∂–¥—å \U00002614", 
         "Drizzle": "–î–æ–∂–¥—å \U00002614", 
         "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1", 
         "Snow": "–°–Ω–µ–≥ \U0001F328", 
         "Mist": "–¢—É–º–∞–Ω \U0001F32B" 
     } 
  
    try: 
         message.text=message.text.replace('/weather ','')
         r = requests.get( 
             f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric" 
         ) 
         data = r.json() 
  
         city = data["name"] 
         cur_weather = data["main"]["temp"] 
  
         weather_description = data["weather"][0]["main"] 
         if weather_description in code_to_smile: 
             wd = code_to_smile[weather_description] 
         else: 
             wd = "‚≠êÔ∏è" 
  
         humidity = data["main"]["humidity"] 
         pressure = data["main"]["pressure"] 
         wind = data["wind"]["speed"] 
         sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]) 
         sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) 
         length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp( 
             data["sys"]["sunrise"]) 
  
         await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n" 
                                               f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n" 
                                               f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n" 
                                               f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n" 
                                               f"‚≠êÔ∏è–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!‚≠êÔ∏è" 
                                                   ) 
 
    except: 
         await message.reply("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n/weather Kemerovo") 


#—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ 
if __name__ == '__main__':
    executor.start_polling(dp)